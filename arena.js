// Generated by CoffeeScript 1.7.1
var Arena,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Arena = (function() {
  function Arena(graphics, dt) {
    this.graphics = graphics;
    this.dt = dt;
    this.allElements = __bind(this.allElements, this);
    this.isInside = __bind(this.isInside, this);
    this.filter = __bind(this.filter, this);
    this.update = __bind(this.update, this);
    this.planets = [];
    this.obstacles = [];
    this.rocket = null;
  }

  Arena.prototype.update = function() {
    var e, inOrbitPlanets, rocket, _i, _len, _ref;
    if (!this.isInside(this.rocket)) {
      this.graphics.showText('Game over');
      return true;
    }
    if (this.rocket.isOrbiting()) {
      if (!this.rocket.orbit.isInGravityField(this.rocket)) {
        console.log("orbit ended");
        this.rocket.endOrbit();
      } else if (this.rocket.orbit.hasCollided(this.rocket)) {
        this.graphics.showText('Game over');
        return true;
      }
    } else {
      rocket = this.rocket;
      inOrbitPlanets = _.filter(this.planets, function(p) {
        return p.isInGravityField(rocket);
      });
      inOrbitPlanets = _.sortBy(inOrbitPlanets, function(p) {
        return Vector.distance(p.pos, rocket.pos);
      });
      if (inOrbitPlanets[0]) {
        console.log("orbit started");
        rocket.beginOrbit(inOrbitPlanets[0]);
      }
    }
    _ref = this.allElements();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      e.move(this.dt, 0);
    }
    this.planets = this.filter(this.planets);
    this.obstacles = this.filter(this.obstacles);
    this.graphics.update(this.allElements());
    return false;
  };

  Arena.prototype.filter = function(elements) {
    return _.filter(elements, (function(_this) {
      return function(element) {
        return _this.isInside(element);
      };
    })(this));
  };

  Arena.prototype.isInside = function(element) {
    return element.pos.x >= 0 && element.pos.x <= this.graphics.w && element.pos.y >= 0 && element.pos.y <= this.graphics.h;
  };

  Arena.prototype.allElements = function() {
    return _.flatten([this.planets, this.obstacles, this.rocket]);
  };

  return Arena;

})();
