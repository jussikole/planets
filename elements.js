// Generated by CoffeeScript 1.7.1
var Element, G, Obstacle, Planet, Rocket,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

G = 3;

Element = (function() {
  Element._id = 1;

  function Element(options) {
    this.endOrbit = __bind(this.endOrbit, this);
    this.beginOrbit = __bind(this.beginOrbit, this);
    this.isOrbiting = __bind(this.isOrbiting, this);
    this.sizeY = __bind(this.sizeY, this);
    this.sizeX = __bind(this.sizeX, this);
    this.drawFunction = __bind(this.drawFunction, this);
    this.move = __bind(this.move, this);
    var defaults;
    defaults = {
      pos: new Vector(),
      color: d3.rgb(0, 0, 0),
      r: 20,
      v: new Vector(),
      orbit: null
    };
    _.defaults(options, defaults);
    this.id = Element._id++;
    this.pos = options.pos;
    this.color = options.color;
    this.r = options.r;
    this.v = options.v;
    this.orbit = options.orbit;
  }

  Element.prototype.move = function(dt, throttle) {
    var a, d;
    if (this.orbit) {
      d = Vector.distance(this.pos, this.orbit.pos);
      a = Vector.pointToPoint(this.pos, this.orbit.pos).unit().multiply(G * this.orbit.mass / Math.pow(d, 2) - throttle);
      this.v.add(a.multiply(dt));
      return this.pos.add(this.v.multiply(dt));
    } else {
      return this.pos.add(this.v.multiply(dt));
    }
  };

  Element.prototype.drawFunction = function() {
    return function(g) {};
  };

  Element.prototype.sizeX = function() {
    return this.r;
  };

  Element.prototype.sizeY = function() {
    return this.r;
  };

  Element.prototype.isOrbiting = function() {
    return this.orbit !== null;
  };

  Element.prototype.beginOrbit = function(planet) {
    return this.orbit = planet;
  };

  Element.prototype.endOrbit = function() {
    return this.orbit = null;
  };

  return Element;

})();

Planet = (function(_super) {
  __extends(Planet, _super);

  function Planet(options) {
    this.move = __bind(this.move, this);
    this.hasCollided = __bind(this.hasCollided, this);
    this.isInGravityField = __bind(this.isInGravityField, this);
    this.sizeY = __bind(this.sizeY, this);
    this.sizeX = __bind(this.sizeX, this);
    this.drawFunction = __bind(this.drawFunction, this);
    Planet.__super__.constructor.call(this, options);
    this.mass = options.mass || 100;
    this.field = options.field || 100;
  }

  Planet.prototype.drawFunction = function() {
    return Graphics.drawPlanet;
  };

  Planet.prototype.sizeX = function() {
    return this.field;
  };

  Planet.prototype.sizeY = function() {
    return this.field;
  };

  Planet.prototype.isInGravityField = function(element) {
    return Vector.distance(element.pos, this.pos) <= this.field;
  };

  Planet.prototype.hasCollided = function(element) {
    return Vector.distance(element.pos, this.pos) <= this.r;
  };

  Planet.prototype.move = function(dt) {
    return Planet.__super__.move.call(this, dt, 0);
  };

  return Planet;

})(Element);

Obstacle = (function(_super) {
  __extends(Obstacle, _super);

  function Obstacle(options) {
    this.move = __bind(this.move, this);
    this.drawFunction = __bind(this.drawFunction, this);
    Obstacle.__super__.constructor.call(this, options);
  }

  Obstacle.prototype.drawFunction = function() {
    return Graphics.drawObstacle;
  };

  Obstacle.prototype.move = function(dt) {
    return Obstacle.__super__.move.call(this, dt, 0);
  };

  return Obstacle;

})(Element);

Rocket = (function(_super) {
  __extends(Rocket, _super);

  function Rocket(options, controls) {
    this.controls = controls;
    this.move = __bind(this.move, this);
    this.drawFunction = __bind(this.drawFunction, this);
    Rocket.__super__.constructor.call(this, options);
  }

  Rocket.prototype.drawFunction = function() {
    return Graphics.drawRocket;
  };

  Rocket.prototype.move = function(dt) {
    return Rocket.__super__.move.call(this, dt, controls.throttle);
  };

  return Rocket;

})(Element);
