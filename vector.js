// Generated by CoffeeScript 1.7.1
var Vector,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Vector = (function() {
  function Vector(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.projection = __bind(this.projection, this);
  }

  Vector.prototype.isEmpty = function() {
    return this.x === 0 && this.y === 0;
  };

  Vector.prototype.add = function(vector) {
    this.x += vector.x;
    this.y += vector.y;
    return this;
  };

  Vector.prototype.addNew = function(vector) {
    var x, y;
    x = this.x + vector.x;
    y = this.y + vector.y;
    return new Vector(x, y);
  };

  Vector.prototype.multiply = function(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  };

  Vector.prototype.multiplyNew = function(scalar) {
    return new Vector(this.x * scalar, this.y * scalar);
  };

  Vector.prototype.angle = function() {
    return Math.atan2(-this.y, this.x);
  };

  Vector.prototype.length = function() {
    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
  };

  Vector.prototype.unit = function() {
    this.multiply(1 / this.length());
    return this;
  };

  Vector.prototype.copy = function() {
    return new Vector(this.x, this.y);
  };

  Vector.prototype.projection = function(vector) {
    var scale;
    scale = Vector.dot(this, vector) / Math.pow(vector.length(), 2);
    return vector.multiplyNew(scale);
  };

  Vector.dot = function(v1, v2) {
    return v1.x * v2.x + v1.y * v2.y;
  };

  Vector.distance = function(v1, v2) {
    return Math.sqrt(Math.pow(v1.x - v2.x, 2) + Math.pow(v1.y - v2.y, 2));
  };

  Vector.pointToPoint = function(pos1, pos2) {
    return new Vector(pos2.x - pos1.x, pos2.y - pos1.y);
  };

  return Vector;

})();
